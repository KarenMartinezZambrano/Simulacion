{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La matriz A es -->\n",
      "[[ 1  2  3]\n",
      " [ 0 -4  6]\n",
      " [ 3  7  5]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "myMatrizA=np.array([[1,2,3],[0,-4,6],[3,7,5]])\n",
    "print \"La matriz A es -->\"\n",
    "print myMatrizA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La primera fila es -->\n",
      "[[2 3]]\n"
     ]
    }
   ],
   "source": [
    "primeraFilaA=myMatrizA[0:1,1:3]\n",
    "print \"La primera fila es -->\"\n",
    "print primeraFilaA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La segunda columna es -->\n",
      "[[ 2]\n",
      " [-4]\n",
      " [ 7]]\n"
     ]
    }
   ],
   "source": [
    "SegundaColumnaA=myMatrizA[0:3,1:2]\n",
    "print \"La segunda columna es -->\"\n",
    "print SegundaColumnaA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La Matriz inversa de A es -->\n",
      "[[-6.2  1.1  2.4]\n",
      " [ 1.8 -0.4 -0.6]\n",
      " [ 1.2 -0.1 -0.4]]\n"
     ]
    }
   ],
   "source": [
    "invMyMatrizA=np.linalg.inv(myMatrizA)\n",
    "print \"La Matriz inversa de A es -->\"\n",
    "print invMyMatrizA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La Matriz inversa de A con 10 digitos es -->\n",
      "[[-6.2  1.1  2.4]\n",
      " [ 1.8 -0.4 -0.6]\n",
      " [ 1.2 -0.1 -0.4]]\n"
     ]
    }
   ],
   "source": [
    "invMyMatrizA10Decimales=np.around(invMyMatrizA, decimals=10)\n",
    "print \"La Matriz inversa de A con 10 digitos es -->\"\n",
    "print invMyMatrizA10Decimales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "El resultado de la multiplicacion es -->\n",
      "[[ 1.00000000e+00  0.00000000e+00  0.00000000e+00]\n",
      " [ 0.00000000e+00  1.00000000e+00  0.00000000e+00]\n",
      " [ 4.44089210e-15 -1.11022302e-16  1.00000000e+00]]\n",
      "El resultado de la multiplicacion con redondeo es -->\n",
      "[[ 1.  0.  0.]\n",
      " [ 0.  1.  0.]\n",
      " [ 0. -0.  1.]]\n"
     ]
    }
   ],
   "source": [
    "myMatrizAXinvmyMatrizA=np.matmul(myMatrizA,invMyMatrizA)\n",
    "print \"El resultado de la multiplicacion es -->\"\n",
    "print myMatrizAXinvmyMatrizA\n",
    "myMatrizAXinvmyMatrizARounded=np.around(myMatrizAXinvmyMatrizA, decimals=0)\n",
    "print \"El resultado de la multiplicacion con redondeo es -->\"\n",
    "print myMatrizAXinvmyMatrizARounded"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "El determinante de la matriz A es -->\n",
      "10.000000000000007\n"
     ]
    }
   ],
   "source": [
    "determinantemyMatrizA=np.linalg.det(myMatrizA)\n",
    "print \"El determinante de la matriz A es -->\"\n",
    "print determinantemyMatrizA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Los valores propios de A es son -->\n",
      "[ 9.48845758 -0.14348759 -7.34496998]\n",
      "Los vectores propios de A es son -->\n",
      "[[ 0.38619329  0.94502015  0.03425966]\n",
      " [ 0.37489703 -0.27508868 -0.87292444]\n",
      " [ 0.84279711 -0.17681382  0.48665101]]\n"
     ]
    }
   ],
   "source": [
    "valoresPropios, vectoresPropios= np.linalg.eig(myMatrizA)\n",
    "print \"Los valores propios de A es son -->\"\n",
    "print valoresPropios\n",
    "print \"Los vectores propios de A es son -->\"\n",
    "print vectoresPropios"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La matriz B es -->\n",
      "[[0 1]\n",
      " [1 0]\n",
      " [2 3]]\n"
     ]
    }
   ],
   "source": [
    "myMatrizB=np.array([[0,1],[1,0],[2,3]])\n",
    "print \"La matriz B es -->\"\n",
    "print myMatrizB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La seudo Inversa de la matriz B es -->\n",
      "[[-0.42857143  0.71428571  0.14285714]\n",
      " [ 0.35714286 -0.42857143  0.21428571]]\n"
     ]
    }
   ],
   "source": [
    "operacion1=np.matrix.transpose(myMatrizB)\n",
    "operacion2=np.matmul(operacion1,myMatrizB)\n",
    "operacion3=np.linalg.inv(operacion2)\n",
    "myMatrizJ=np.matmul(operacion3,operacion1)\n",
    "print \"La seudo Inversa de la matriz B es -->\"\n",
    "print myMatrizJ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "El resultado de la multiplicacion es -->\n",
      "[[ 1.00000000e+00  3.33066907e-16]\n",
      " [-1.66533454e-16  1.00000000e+00]]\n",
      "El resultado de la multiplicacion con redondeo es -->\n",
      "[[ 1.  0.]\n",
      " [-0.  1.]]\n"
     ]
    }
   ],
   "source": [
    "resultado=np.matmul(myMatrizJ,myMatrizB)\n",
    "print \"El resultado de la multiplicacion es -->\"\n",
    "print resultado\n",
    "resultadoRedondeado=np.around(resultado, decimals=0)\n",
    "print \"El resultado de la multiplicacion con redondeo es -->\"\n",
    "print resultadoRedondeado"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La dimension de I es -->\n",
      "(2, 2)\n"
     ]
    }
   ],
   "source": [
    "dimensionDeI = np.shape(resultado)\n",
    "print \"La dimension de I es -->\"\n",
    "print dimensionDeI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
